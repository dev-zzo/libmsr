/*
 * libmsr: A library to interact with MSRxxx magnetic card readers/writers
 */

#ifndef LIBMSR_H
#define LIBMSR_H

#include <Windows.h>

#define LIBMSRDECL __stdcall

#ifdef _DLL
#define LIBMSRAPI __declspec(dllexport) LIBMSRDECL
#else 
#define LIBMSRAPI __declspec(dllimport) LIBMSRDECL
#endif

typedef long LIBMSRSTATUS;
typedef void* LIBMSRHANDLE;

#define LIBMSR_OK 0L
#define LIBMSR_ERROR 0xC0000000L
#define LIBMSR_MEM_ALLOC_FAILED (LIBMSR_ERROR | 0x00000001)
#define LIBMSR_INVALID_ARGUMENT (LIBMSR_ERROR | 0x00000002)
#define LIBMSR_DEVICE_ERROR (LIBMSR_ERROR | 0x00010000L)
#define LIBMSR_DEVICE_UNEXPECTED_RESPONSE (LIBMSR_DEVICE_ERROR | 0x00000001)
#define LIBMSR_DEVICE_COMMAND_FAILED (LIBMSR_DEVICE_ERROR | 0x00000002)
#define LIBMSR_COMM_PORT_ERROR (LIBMSR_ERROR | 0x00020000L)
#define LIBMSR_PORT_OPEN_FAILED (LIBMSR_COMM_PORT_ERROR | 0x00000002)
#define LIBMSR_PORT_SETUP_FAILED (LIBMSR_COMM_PORT_ERROR | 0x00000003)
#define LIBMSR_PORT_WRITE_FAILED (LIBMSR_COMM_PORT_ERROR | 0x00000004)
#define LIBMSR_PORT_READ_FAILED (LIBMSR_COMM_PORT_ERROR | 0x00000005)

/* Open the port and allocate a handle. */
LIBMSRSTATUS LIBMSRAPI MSROpen(LPTSTR PortName, LIBMSRHANDLE *pHandle);
/* Close the port; handle is not usable after that. */
void LIBMSRAPI MSRClose(LIBMSRHANDLE Handle);

LIBMSRSTATUS LIBMSRAPI MSRReset(LIBMSRHANDLE Handle);

LIBMSRSTATUS LIBMSRAPI MSRLedAllOff(LIBMSRHANDLE Handle);
LIBMSRSTATUS LIBMSRAPI MSRLedAllOn(LIBMSRHANDLE Handle);
LIBMSRSTATUS LIBMSRAPI MSRLedGreenOn(LIBMSRHANDLE Handle);
LIBMSRSTATUS LIBMSRAPI MSRLedYellowOn(LIBMSRHANDLE Handle);
LIBMSRSTATUS LIBMSRAPI MSRLedRedOn(LIBMSRHANDLE Handle);

LIBMSRSTATUS LIBMSRAPI MSRTestComms(LIBMSRHANDLE Handle);
LIBMSRSTATUS LIBMSRAPI MSRCardErase(LIBMSRHANDLE Handle, BOOL EraseTrack1, BOOL EraseTrack2, BOOL EraseTrack3);
LIBMSRSTATUS LIBMSRAPI MSRSetCoercivity(LIBMSRHANDLE Handle, BOOL IsHiCo);
LIBMSRSTATUS LIBMSRAPI MSRGetCoercivity(LIBMSRHANDLE Handle, BOOL *pIsHiCo);
LIBMSRSTATUS LIBMSRAPI MSRSetLeadingZeroCount(LIBMSRHANDLE Handle, BYTE Tracks13Count, BYTE Track2Count);
LIBMSRSTATUS LIBMSRAPI MSRGetLeadingZeroCount(LIBMSRHANDLE Handle, BYTE *pTracks13Count, BYTE *pTrack2Count);
LIBMSRSTATUS LIBMSRAPI MSRSetDensity(LIBMSRHANDLE Handle, UINT Track, UINT BitsPerInch);
LIBMSRSTATUS LIBMSRAPI MSRSetBitsPerChar(LIBMSRHANDLE Handle, BYTE Track1BPC, BYTE Track2BPC, BYTE Track3BPC);

/* Read data from an ISO-compliant card. */
LIBMSRSTATUS LIBMSRAPI MSRCardReadISO(LIBMSRHANDLE Handle, BYTE *pTrack1Buffer, BYTE *pTrack2Buffer, BYTE *pTrack3Buffer);

#endif /* LIBMSR_H */
